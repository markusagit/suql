<?php

class SQLBuilder{const LEFT_JOIN='<--';const RIGHT_JOIN='-->';const INNER_JOIN='<-->';private $SQLObject=null;private $sql=null;function __construct($a){$this->SQLObject=$a;}public function getSql(){return$this->sql;}public function run(){if(!$this->SQLObject)return;$this->sql=trim($this->buildQuery('main'));}private function parseJoinFields($b,$c){$d=array_column($c,'field');$e=array_column($c,'alias');return str_replace($e,$d,$b);}private function parseJoin($f,$c){foreach($f as&$g){$b=$g['on'];$b=$this->parseJoinFields($b,$c);if(count(explode(self::INNER_JOIN,$b))===2){$g['type']='inner';$g['on']=implode(' = ',explode(self::INNER_JOIN,$b));}elseif(count(explode(self::RIGHT_JOIN,$b))===2){$g['type']='right';$g['on']=implode(' = ',explode(self::RIGHT_JOIN,$b));}elseif(count(explode(self::LEFT_JOIN,$b))===2){$g['type']='left';$g['on']=implode(' = ',explode(self::LEFT_JOIN,$b));}else{}}unset($g);return$f;}private function buildSelect($c){if(empty($c))return'';return'select '.implode(', ',array_keys($c));}private function buildFrom($h){return$h?"from $h":'';}private function buildJoin($f){if(empty($f))return'';$i=[];foreach($f as$g){$i[]="{$g['type']} join {$g['table']} on {$g['on']}";}return implode(' ',$i);}private function buildGroup($j){return!empty($j)?'group by '.implode(', ',$j):'';}private function buildWhere($k){return!empty($k)?'having '.implode(' and ',$k):'';}private function buildOrder($l){if(empty($l))return'';$i=[];foreach($l as$m){$i[]="{$m['field']} {$m['direction']}";}return'order by '.implode(', ',$i);}private function buildQuery($n){$o="
      #select#
      #from#
      #join#
      #group#
      #where#
      #order#
    ";$p=$this->SQLObject['queries'][$n];$o=str_replace('#select#',$this->buildSelect($p['select']),$o);if(isset($this->SQLObject['queries'][$p['from']]))$o=str_replace('#from#','from ('.$this->buildQuery($p['from']).') '.$p['from'],$o);else$o=str_replace('#from#',$this->buildFrom($p['from']),$o);$o=str_replace('#join#',$this->buildJoin($this->parseJoin($p['join'],$p['select'])),$o);$o=str_replace('#group#',$this->buildGroup($p['group']),$o);$o=str_replace('#where#',$this->buildWhere($p['where']),$o);return str_replace('#order#',$this->buildOrder($p['order']),$o);}}

class SuQL{private $suql=null;private $tm=null;private $SQLBuilder=null;private $error=null;function __construct($a){$this->suql=trim($a);}public function getError(){return$this->error;}public function pureSQL(){if($this->interpret())return$this->buildSQL();return false;}private function interpret(){$this->tm=new TuringMachine();$this->tm->setHandler(new SuQLHandler());$this->tm->go('0');try{for($a=0;$a<strlen($this->suql);$a++){$this->tm->ch=substr($this->suql,$a,1);switch($this->tm->getCurrentState()){case'0':if(SuQLEntityHelper::isS($this->tm->ch));elseif($this->tm->ch==='#')$this->tm->go('table_alias');elseif(SuQLEntityHelper::isI($this->tm->ch))$this->tm->go('select');else{throw new Exception($a);}break;case'table_alias':if(SuQLEntityHelper::isI($this->tm->ch))$this->tm->stay('table_alias');elseif(SuQLEntityHelper::isS($this->tm->ch));elseif($this->tm->ch==='=')$this->tm->go('new_table_alias');else{throw new Exception($a);}break;case'select':if(SuQLEntityHelper::isI($this->tm->ch))$this->tm->stay('select');elseif(SuQLEntityHelper::isS($this->tm->ch))$this->tm->go('new_select_expects');elseif($this->tm->ch==='{')$this->tm->go('new_select');else{throw new Exception($a);}break;case'new_table_alias':if(SuQLEntityHelper::isS($this->tm->ch));elseif(SuQLEntityHelper::isI($this->tm->ch))$this->tm->go('select');else{throw new Exception($a);}break;case'new_select_expects':if(SuQLEntityHelper::isS($this->tm->ch));elseif($this->tm->ch==='{')$this->tm->go('new_select');else{throw new Exception($a);}break;case'new_select':if(SuQLEntityHelper::isS($this->tm->ch));elseif(SuQLEntityHelper::isI($this->tm->ch))$this->tm->go('field');elseif($this->tm->ch==='*')$this->tm->go('field');elseif($this->tm->ch==='}')$this->tm->go('select_end');else{throw new Exception($a);}break;case'field':if(SuQLEntityHelper::isI($this->tm->ch))$this->tm->stay('field');elseif(SuQLEntityHelper::isS($this->tm->ch))$this->tm->go('new_field_expects');elseif($this->tm->ch===',')$this->tm->go('new_field');elseif($this->tm->ch==='}')$this->tm->go('select_end');elseif($this->tm->ch==='@')$this->tm->go('field_alias_expects');else{throw new Exception($a);}break;case'select_end':if(SuQLEntityHelper::isS($this->tm->ch));elseif($this->tm->ch==='~')$this->tm->go('where_clause');elseif($this->tm->ch===';')$this->tm->go('0');elseif($this->tm->ch==='[')$this->tm->go('join_clause');else{throw new Exception($a);}break;case'new_field_expects':if($this->tm->ch===',')$this->tm->go('new_field');elseif($this->tm->ch==='}')$this->tm->go('select_end');elseif(SuQLEntityHelper::isS($this->tm->ch));else{throw new Exception($a);}break;case'new_field':if(SuQLEntityHelper::isS($this->tm->ch));elseif(SuQLEntityHelper::isI($this->tm->ch))$this->tm->go('field');else{throw new Exception($a);}break;case'field_alias_expects':if(SuQLEntityHelper::isI($this->tm->ch))$this->tm->go('field_alias');else{throw new Exception($a);}break;case'field_alias':if(SuQLEntityHelper::isI($this->tm->ch))$this->tm->stay('field_alias');elseif(SuQLEntityHelper::isS($this->tm->ch))$this->tm->go('new_aliased_field_expects');elseif($this->tm->ch===',')$this->tm->go('new_field');elseif($this->tm->ch==='}')$this->tm->go('select_end');elseif($this->tm->ch==='.')$this->tm->go('field_modifier');else{throw new Exception($a);}break;case'field_modifier':if(SuQLEntityHelper::isI($this->tm->ch))$this->tm->stay('field_modifier');elseif($this->tm->ch===','){$this->tm->go('field_modifier');$this->tm->go('apply_field_modifiers');}elseif($this->tm->ch==='}'){$this->tm->go('field_modifier');$this->tm->go('apply_field_modifiers');}elseif(SuQLEntityHelper::isS($this->tm->ch))$this->tm->go('new_field_modifier_expects');elseif($this->tm->ch==='.')$this->tm->go('field_modifier');else{throw new Exception($a);}break;case'new_field_modifier_expects':if(SuQLEntityHelper::isS($this->tm->ch));elseif($this->tm->ch===','){$this->tm->go('field_modifier');$this->tm->go('apply_field_modifiers');}elseif($this->tm->ch==='}'){$this->tm->go('field_modifier');$this->tm->go('apply_field_modifiers');}else{throw new Exception($a);}break;case'apply_field_modifiers':if(SuQLEntityHelper::isS($this->tm->ch));elseif(SuQLEntityHelper::isI($this->tm->ch))$this->tm->go('field');elseif($this->tm->ch===';')$this->tm->go('0');elseif($this->tm->ch==='~')$this->tm->go('where_clause');elseif($this->tm->ch==='[')$this->tm->go('join_clause');else{throw new Exception($a);}break;case'new_aliased_field_expects':if(SuQLEntityHelper::isS($this->tm->ch));elseif($this->tm->ch===',')$this->tm->go('new_field');elseif($this->tm->ch==='}')$this->tm->go('select_end');else{throw new Exception($a);}break;case'where_clause':if(SuQLEntityHelper::isWhereClausePossibleSymbol($this->tm->ch))$this->tm->stay('where_clause');elseif($this->tm->ch===';'){$this->tm->go('where_clause_end');$this->tm->go('0');}elseif($this->tm->ch==='['){$this->tm->go('where_clause_end');$this->tm->go('join_clause');}else{throw new Exception($a);}break;case'join_clause':if(SuQLEntityHelper::isJoinClausePossibleSymbol($this->tm->ch))$this->tm->stay('join_clause');elseif($this->tm->ch===']')$this->tm->go('join_clause_end');else{throw new Exception($a);}break;case'join_clause_end':if(SuQLEntityHelper::isS($this->tm->ch));elseif(SuQLEntityHelper::isI($this->tm->ch))$this->tm->go('joined_select');else{throw new Exception($a);}break;case'joined_select':if(SuQLEntityHelper::isI($this->tm->ch))$this->tm->stay('joined_select');elseif(SuQLEntityHelper::isS($this->tm->ch))$this->tm->go('new_joined_select_expects');elseif($this->tm->ch==='{')$this->tm->go('new_joined_select');else{throw new Exception($a);}break;case'new_joined_select_expects':if(SuQLEntityHelper::isS($this->tm->ch));elseif($this->tm->ch==='{')$this->tm->go('new_joined_select');else{throw new Exception($a);}break;case'new_joined_select':if(SuQLEntityHelper::isS($this->tm->ch));elseif(SuQLEntityHelper::isI($this->tm->ch))$this->tm->go('field');elseif($this->tm->ch==='*')$this->tm->go('field');elseif($this->tm->ch==='}')$this->tm->go('select_end');else{throw new Exception($a);}break;}}}catch(Exception$b){$this->error=SuQLLog::error($this->suql,$b->getMessage());return false;}return true;}private function buildSQL(){$this->SQLBuilder=new SQLBuilder($this->tm->output());$this->SQLBuilder->run();return$this->SQLBuilder->getSql();}}

class SuQLEntityHelper{public static function isI($a){return ord($a)>=48&&ord($a)<=57||ord($a)>=97&&ord($a)<=122||$a==='_';}public static function isS($a){return in_array(ord($a),[32,13,10]);}public static function isParentheses($a){return$a==='('||$a===')';}public static function isComparisonSymbol($a){return$a==='>'||$a==='<'||$a==='=';}public static function isJoinEntitySymbol($a){return$a==='>'||$a==='<'||$a==='-';}public static function isPlaceholderSymbol($a){return$a==='?';}public static function isQuote($a){return$a==='\''||$a==='"';}public static function isWhereClausePossibleSymbol($a){return self::isI($a)||self::isS($a)||self::isParentheses($a)||self::isComparisonSymbol($a)||self::isPlaceholderSymbol($a)||self::isQuote($a);}public static function isJoinClausePossibleSymbol($a){return self::isI($a)||self::isS($a)||self::isJoinEntitySymbol($a);}}

class SuQLHandler{private $stringBuffer1;private $stringBuffer2;private $stringBuffer3;private $arrayBuffer1;private $canonicalQuery;private $osuql=['queries'=>[],];private $query;private $table;function __construct(){$this->stringBuffer1='';$this->stringBuffer2='';$this->stringBuffer3='';$this->arrayBuffer1=[];$this->canonicalQuery=['select'=>[],'from'=>null,'where'=>[],'join'=>[],'group'=>[],'order'=>[]];$this->query='main';$this->table=null;$this->osuql['queries'][$this->query]=$this->canonicalQuery;}public function output(){return$this->osuql;}public function TM_GO_0($a){$this->query='main';$this->table=null;}public function TM_STAY_table_alias($a){$this->stringBuffer1.=$a;}public function TM_GO_new_table_alias($a){$this->query=$this->stringBuffer1;$this->stringBuffer1='';$this->osuql['queries'][$this->query]=$this->canonicalQuery;}public function TM_GO_select($a){$this->stringBuffer1.=$a;}public function TM_STAY_select($a){$this->stringBuffer1.=$a;}public function TM_GO_new_select($a){$this->osuql['queries'][$this->query]['from']=$this->stringBuffer1;$this->table=$this->stringBuffer1;$this->stringBuffer1='';}public function TM_GO_field($a){$this->stringBuffer1.=$a;}public function TM_STAY_field($a){$this->stringBuffer1.=$a;}public function TM_GO_new_field($a){$this->osuql['queries'][$this->query]['select']["$this->table.$this->stringBuffer1".($this->stringBuffer2?" as $this->stringBuffer2":'')]=['field'=>"$this->table.$this->stringBuffer1",'alias'=>$this->stringBuffer2,];$this->stringBuffer1='';$this->stringBuffer2='';}public function TM_GO_select_end($a){if($this->stringBuffer1)$this->osuql['queries'][$this->query]['select']["$this->table.$this->stringBuffer1".($this->stringBuffer2?" as $this->stringBuffer2":'')]=['field'=>"$this->table.$this->stringBuffer1",'alias'=>$this->stringBuffer2,];$this->stringBuffer1='';$this->stringBuffer2='';}public function TM_GO_field_alias($a){$this->stringBuffer2.=$a;}public function TM_STAY_field_alias($a){$this->stringBuffer2.=$a;}public function TM_STAY_where_clause($a){$this->stringBuffer1.=$a;}public function TM_GO_where_clause_end($a){$this->osuql['queries'][$this->query]['where'][]=trim($this->stringBuffer1);$this->stringBuffer1='';}public function TM_STAY_join_clause($a){$this->stringBuffer1.=$a;}public function TM_GO_join_clause_end($a){}public function TM_GO_joined_select($a){$this->stringBuffer2.=$a;}public function TM_STAY_joined_select($a){$this->stringBuffer2.=$a;}public function TM_GO_new_joined_select($a){$this->osuql['queries'][$this->query]['join'][]=['table'=>$this->stringBuffer2,'on'=>$this->stringBuffer1,];$this->table=$this->stringBuffer2;$this->stringBuffer1='';$this->stringBuffer2='';}public function TM_GO_field_modifier($a){if($this->stringBuffer3)$this->arrayBuffer1[]=$this->stringBuffer3;$this->stringBuffer3='';}public function TM_STAY_field_modifier($a){$this->stringBuffer3.=$a;}public function TM_GO_apply_field_modifiers($a){foreach($this->arrayBuffer1 as$b){$c="mod_$b";if(method_exists($this,$c))$this->$c($this->table,$this->stringBuffer1,$this->stringBuffer2);}$this->stringBuffer1='';$this->stringBuffer2='';$this->arrayBuffer1=[];}private function mod_group($a,$b,$c){$this->osuql['queries'][$this->query]['group'][]="$a.$b";}private function mod_count($a,$b,$c){$this->osuql['queries'][$this->query]['select']["count($a.$b)".($c?" as $c":'')]=['field'=>"count($a.$b)",'alias'=>$c,];}private function mod_desc($a,$b,$c){$this->osuql['queries'][$this->query]['order'][]=['field'=>"$a.$b",'direction'=>'desc',];}private function mod_asc($a,$b,$c){$this->osuql['queries'][$this->query]['order'][]=['field'=>"$a.$b",'direction'=>'asc',];}}

class SuQLLog{public static function error($a,$b){return("<p style='font-family: courier;'>".substr($a,0,$b)."<span style='color: white; font-weight: bold; background: red;'>".$a[$b]."</span>".substr($a,$b+1,strlen($a))."</p>");}}

class TuringMachine{private $handler=null;private $currentState;public $ch=null;function __construct(){}public function go($a){$this->currentState=$a;if($this->handler){$b="TM_GO_$a";if(method_exists($this->handler,$b))$this->handler->$b($this->ch);}}public function stay($a){if($this->handler){$b="TM_STAY_$a";if(method_exists($this->handler,$b))$this->handler->$b($this->ch);}}public function setHandler($a){$this->handler=$a;}public function getCurrentState(){return$this->currentState;}public function output(){return$this->handler->output();}}
